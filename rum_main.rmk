(define util (require "util"))
(define fs (require "fs"))
(define _ (require "underscore"))
(define escodegen (require "escodegen"))

(define Parser (require "./parser"))
(define parser Parser.parser)
(define (symbol? x)
  (instance? x Parser.Symbol))

(define exprs (parser.parse "77"))

(util.puts (util.inspect exprs #f null #t))
(util.puts "--")

(define (raise msg info)
  (or info (set! info {}))
  (aset! info "ERROR" msg)
  (throw (util.inspect info)))
(define (raise-if cond msg info)
  (if cond (raise msg info) undefined))

(define (ast typename info)
  (aset! info "type" typename)
  info)

(define (convert-defvar left rest)
  (define init (if (= rest.length 0)
                 null
                 (if (= rest.length 1)
                   (convert-value (aref rest 0))
                   (raise "malformed defvar" (receiver: receiver)))))
  (ast "VariableDeclaration"
       (kind: "var"
        declarations: (array (ast "VariableDeclarator"
                                  (id: (convert-node left)
                                   init: init))))))

(define (wrap-with-function-call inner-ast)
  (ast "CallExpression"
       (arguments: (array)
        callee: (ast "FunctionExpression"
                     (params: (array)
                      defaults: (array)
                      body: (ast "BlockStatement"
                                 (body: (array (statement-expr inner-ast)))))))))

(define (statement-expr inner-ast)
  (if (.. inner-ast type (match #/Expression$/))
    (ast "ExpressionStatement" (expression: inner-ast))
    inner-ast))

(define (convert-stmt v)
  (statement-expr (convert-node v)))

(define (convert-defun left rest)
  (define fname (aref left 0))
  (define params (.. left (slice 1)))
  (raise-if (not (symbol? fname)) "malformed defun")
  
  (define func 
    (ast "FunctionExpression"
      (params: (_.map 1 params))))
  #f)


