; vim: set ft=scheme:
(define util (require "util"))
(define fs (require "fs"))
(define _ (require "underscore"))
(define escodegen (require "escodegen"))

(define RUM_VERSION (require "./version"))
(define Parser (require "./parser"))
(define parser Parser.parser)

(define RumExpr (require "./rum_expr"))
(define Sym RumExpr.Sym)
(define symbol? RumExpr.isSymbol)
(define obj-expr? RumExpr.isObjExpr)

; Print debug message
; (d value)
; (d "header:" value)
(define (d arg1 arg2)
  (define header (if arg2 arg1 "debug: "))
  (define value (or arg2 arg1))
                    ;             obj   showHidden depth colors
  (util.puts header (util.inspect value #f         null  #t))
  value)

(define (raise msg info)
  (or info (set! info (new Object)))
  (aset! info "ERROR" msg)
  (throw (util.inspect info)))
(define (raise-if cond msg info)
  (when cond
    (raise msg info)))

(define (append) ; ls1 ls2 ...
  (_.flatten arguments true))

(define (flat-map ls f)
  (_.flatten (_.map ls f) true))

(define (cons obj ary)
  (append (array obj) ary))

(define (ast typename info)
  (aset! info "type" typename)
  info)

; Create VariableDeclaration
; left :: variable name
; rest :: value
(define (convert-defvar left rest)
  (define init (if (= rest.length 0)
                 null
                 (if (= rest.length 1)
                   (convert-value (~ rest 0))
                   (raise "malformed defvar" (receiver: receiver)))))
  (ast "VariableDeclaration"
       (kind: "var"
        declarations: (array (ast "VariableDeclarator"
                                  (id: (convert-node left)
                                   init: init))))))

; Wrap inner-ast with `(function(){ ... })()`
; (Used to convert a statement to expression)
(define (wrap-with-function-call inner-ast)
  (ast "CallExpression"
    (arguments: (array)
     callee: (ast "FunctionExpression"
               (params: (array)
                defaults: (array)
                body: (ast "BlockStatement"
                        (body: (array (statement-expr inner-ast))))
                id: null
                rest: null
                generator: #f
                expression: #f)))))

; Create ExpressionStatement if `inner-ast` has a value.
; Just return `inner-ast` otherwise 
(define (statement-expr inner-ast)
  (if (inner-ast.type.match #/Literal|Expression|Identifier$/)
    (ast "ExpressionStatement" (expression: inner-ast))
    inner-ast))

; Convert rum-expression `v` to statement
(define (convert-stmt v)
  (statement-expr (convert-node v)))

; Convert rum-expressions `vs` to Array of statement
(define (convert-stmts vs)
  (_.map vs convert-stmt))

; Create a BlockStatement which ends with ReturnStatement
; (except when the last expression cannot have value.)
(define (block-stmt-with-return body-exprs)
  (ast "BlockStatement"
    (body: (body-exprs.map (^(body-item idx)
             (if (= idx (- body-exprs.length 1))
               (begin
                 (define noval-ast (convert-node body-item))
                 (if (noval-ast.type.match #/ForStatement|ThrowStatement|WhileStatement/)
                   noval-ast
                   (ast "ReturnStatement"
                      (argument: (convert-value body-item)))))
               (convert-stmt body-item)))))))

; Create FunctionExpression which ends with return
; (except when the last expression cannot have value.)
(define (function-with-return params-ary defaults body-exprs)
  (ast "FunctionExpression"
    (params: (_.map params-ary
                    (^(param)
                      (raise-if (not (symbol? param)) "malformed defun param")
                      (convert-node param)))
     defaults: defaults
     body: (block-stmt-with-return body-exprs)
     id: null
     rest: null
     generator: #f
     expression: #f)))

; Convert function definition to VariableDeclaration (var f = function...)
; left :: (f x)
; rest :: function body
(define (convert-defun left rest)
  (define fname (~ left 0))
  (define params (left.slice 1))
  (raise-if (not (symbol? fname)) "malformed defun")
  (ast "VariableDeclaration"
    (kind: "var"
     declarations: (array (ast "VariableDeclarator"
                            (id: (convert-node fname)
                             init: (function-with-return params (array) rest)))))))

(define syntaxes
  ; (define x 1)
  ; (define (f x) 1)
  ("define": (^(v)
    (define left (~ v 1))
    (define rest (v.slice 2))
    (if (symbol? left)
      (convert-defvar left rest)
      (if (_.array? left)
        (convert-defun left rest)
        (raise "malformed define" (left: left rest: rest)))))

   ; (^(x) (+ x 1))
   "^": (^(v)
    (raise-if (not (_.array? (~ v 1))) "malformed function literal params")
    (function-with-return (~ v 1) (array) (v.slice 2)))

   "..": (^(v)
    (define receiver (~ v 1))
    (define call-specs (v.slice 2))
    (call-specs.reduce (^(acc call-spec)
      (if (symbol? call-spec)
        (ast "MemberExpression"
          (computed: #f
           object: acc
           property: (convert-node call-spec)))
        (if (_.array? call-spec)
          (begin
            (raise-if (not (symbol? (~ call-spec 0)))
                      "malformed .."
                      (expected: "Symbol" given: (~ call-spec 0)))
            (ast "CallExpression"
              (callee: (ast "MemberExpression"
                         (computed: #f
                          object: acc
                          property: (convert-node (~ call-spec 0))))
               arguments: (_.map (call-spec.slice 1) convert-value))))
          (raise "malformed ..")))
      )
      (convert-value receiver)))

   ; (set! x 1)
   ; (set! x.y 1)
   "set!": (^(v)
     (ast "AssignmentExpression"
       (operator: "="
        left: (convert-value (~ v 1))
        right: (convert-value (~ v 2)))))

   ; (aset! ary k 1)
   "aset!": (^(v)
     (ast "AssignmentExpression"
       (operator: "="
        left: (ast "MemberExpression"
                (computed: #t
                 object: (convert-value (~ v 1))
                 property: (convert-value (~ v 2))))
        right: (convert-value (~ v 3)))))

   ; (~ ary 0)
   ; (~ ary 0 1 2)  ;=> ary[0][1][2]
   "~": (^(v)
    (raise-if (< v.length 3) (msg: "mailformed ~" v: v))
    (_.reduce (v.slice 2) (^(a b)
                (ast "MemberExpression"
                  (computed: #t
                   object: a
                   property: (convert-value b))))
              (convert-value (~ v 1))))

   ; (new Foo 1)
   "new": (^(v)
     (ast "NewExpression"
       (callee: (convert-value (~ v 1))
        arguments: (_.map (v.slice 2) convert-value))))

   ; (array 1 2)
   "array": (^(v)
     (ast "ArrayExpression"
       (elements: (_.map (v.slice 1) convert-value))))

   ; (= x y)
   "=": (^(v)
     (raise-if (not (= v.length 3)) "malformed =")
     (ast "BinaryExpression"
       (operator: "==="
        left: (convert-value (~ v 1))
        right: (convert-value (~ v 2)))))

   ; (if x y)
   ; (if x y z)
   "if": (^(v value-needed?)
     (if value-needed?
       (ast "ConditionalExpression"
         (test: (convert-value (~ v 1))
          consequent: (convert-value (~ v 2))
          alternate: (convert-value (~ v 3))))
       (if (_.undefined? (~ v 3))
         (ast "IfStatement"
           (test: (convert-value (~ v 1))
            consequent: (convert-stmt (~ v 2))))
         (ast "IfStatement"
           (test: (convert-value (~ v 1))
            consequent: (convert-stmt (~ v 2))
            alternate: (convert-stmt (~ v 3)))))))

   ; (case a ((b c) d) (else e))
   "case": (^(v value-needed?)
     (ast "SwitchStatement"
       (discriminant: (convert-value (~ v 1))
        cases:
          (flat-map (v.slice 2) (^(clause)
            (define cases (~ clause 0))
            (if (= 'else cases)
              (ast "SwitchCase"
                (test: #null    ; else clause does not have `test`
                 consequent: (convert-stmts (clause.slice 1))))
              (begin
                (define last-test (cases.pop))
                (define body (clause.slice 1))
                (append
                  (_.map cases (^(test)             ; n bodyless cases
                    (ast "SwitchCase"
                      (test: (convert-value test)
                       consequent: (array)))))
                  (array                            ; 1 case with body
                    (ast "SwitchCase"
                      (test: (convert-value last-test)
                       consequent:
                         (append
                           (convert-stmts body)
                           (ast "BreakStatement" (label: null))))))))))))))

   ; (begin ...)
   "begin": (^(v value-needed?)
     (if value-needed?
       (ast "CallExpression"
         (arguments: (array)
          callee: (ast "FunctionExpression"
                    (params: (array)
                     defaults: (array)
                     body: (block-stmt-with-return (v.slice 1))
                     id: null
                     rest: null
                     generator: #f
                     expression: #f))))
       (ast "BlockStatement"
         (body: (_.map (v.slice 1) convert-stmt)))))

   ; (and x y z)
   "and": (^(v)
     (ast "LogicalExpression"
       (operator: "&&"
        left: (convert-value (~ v 1))
        right: (convert-value (~ v 2)))))

   ; (or x y z)
   "or": (^(v)
     (define rest (v.slice 1))
     (if (= rest.length 0)
       (ast "Literal" (value: #f))
       (if (= rest.length 1)
         (ast "LogicalExpression"
           (operator: "||"
            left: (convert-value (~ rest 0))
            right: (ast "Literal" (value: #f))))
         (_.reduce (rest.slice 1)
                   (^(acc item)
                     (ast "LogicalExpression"
                          (operator: "||"
                                     left: acc
                                     right: (convert-value item))))
                   (convert-value (~ rest 0))))))

   ; (not x)
   "not": (^(v)
     (raise-if (not (= v.length 2)) "malformed not")
     (ast "UnaryExpression"
       (operator: "!"
        argument: (convert-value (~ v 1)))))

   ; (while expr ...)
   ; TODO: should `while` have value in RumCoke? (currently does not)
   "while": (^(v value-needed?)
     (define while-stmt (ast "WhileStatement"
                          (test: (convert-value (~ v 1))
                           body: (ast "BlockStatement"
                                   (body: (_.map (v.slice 2) convert-stmt))))))
     (if value-needed?
       (wrap-with-function-call while-stmt)
       while-stmt))

   ; (for expr1 expr2 expr3 body...)
   "for": (^(v)
     (raise-if (< v.length 4) (msg: "malformed for" v: v))
     (ast "ForStatement"
       (init: (convert-node (~ v 1))
        test: (convert-value (~ v 2))
        update: (convert-node (~ v 3))
        body: 
          (ast "BlockStatement"
            (body: (convert-stmts (v.slice 4)))))))

   ; (break)
   "break": (^(v)
     ; TODO: should warn if argument is given
     (ast "BreakStatement" (label: null)))

   ; (throw x)
   "throw": (^(v)
     (raise-if (not (= v.length 2)) "malformed throw")
     (ast "ThrowStatement"
       (argument: (convert-value (~ v 1)))))
   
   ; (instance? x Foo)
   "instance?": (^(v)
     (raise-if (not (= v.length 3)) "malformed instance?")
     (ast "BinaryExpression"
       (operator: "instanceof"
        left: (convert-value (~ v 1))
        right: (convert-value (~ v 2)))))

   ; (inc! x)
   "inc!": (^(v)
     (raise-if (not (= v.length 2)) (msg: "malformed inc!" v: v))
     (ast "UpdateExpression"
       (operator: "++"
        argument: (convert-value (~ v 1))
        prefix: #f)))

   ; (dec! x)
   "dec!": (^(v)
     (raise-if (not (= v.length 2)) (msg: "malformed dec!" v: v))
     (ast "UpdateExpression"
       (operator: "--"
        argument: (convert-value (~ v 1))
        prefix: #f)))

   ; (raw-js-ast (ast "FooStatement" ...))
   "raw-js-ast": (^(v)
     (raise-if (not (= v.length 2)) "malformed raw-js-ast")
     (define arg (~ v 1))
     (if (obj-expr? arg)
       (~ arg "content")
       arg))
  ))

; Operators
(_.each (array "+" "-" "*" "/") (^(op)
  (aset! syntaxes op (^(v) 
    (_.reduce (_.map (v.slice 1) convert-value) (^(a b)
      (ast "BinaryExpression"
        (operator: op
         left: a
         right: b))))))))

(_.each (array "<" "<=" ">" ">=") (^(op)
  (aset! syntaxes op (^(v) 
    (define l (_.initial (v.slice 1))) ; 1..last-1
    (define r (v.slice 2))             ;   2..last
    (define (binaryExpr pair)
      (ast "BinaryExpression"
        (operator: op
         left: (convert-value (~ pair 0))
         right: (convert-value (~ pair 1)))))
    (_.reduce (_.map (_.zip l r) binaryExpr) (^(a b)
      (ast "LogicalExpression"
        (operator: "&&"
         left: a
         right: b))))))))

; Convert rum-expression `v` to JS ast
(define (convert-node v value-needed?)
  (cond
    ((or (_.number? v) (_.string? v) (_.reg-exp? v)
         (_.boolean? v) (_.null? v))
      (ast "Literal" (value: v)))
    ((_.undefined? v)
      (ast "UnaryExpression"
        (operator: "void"
         argument: (ast "Literal" (value: 0)))))
    ((_.empty? v)
      (ast "ObjectExpression" (properties: (array))))
    ((symbol? v)
      (ast "Identifier" (name: v.jsName)))
    ((_.array? v)
      ; Application
      (begin
        (define first (~ v 0))
        (define rest (v.slice 1))
        (define conv (and (symbol? first)
                       (~ syntaxes first.name)))
        (if conv
          (conv v value-needed?)
          (ast "CallExpression"
            (callee: (convert-value (~ v 0))
             arguments: (rest.map convert-value))))))
    ((obj-expr? v)
      (ast "ObjectExpression" 
        (properties:
          (_.map (_.pairs v.content) (^(pair)
            (ast "Property"
              (kind: "init"
               key: (ast "Literal" (value: (~ pair 0)))
               value: (convert-value (~ pair 1)))))))))
    (else
      (raise "Misplaced JS object" (js_object: v)))))

; Convert rum-expression `v` to JS ast (value context)
(define (convert-value v)
  (convert-node v #t))

; Expand unquote/unquote-splicing in `a`
(define (expand-qq a)
  (if (not (_.array? a))
    a
    ; Expand items in list
    (cons 'append (a.map (^(x)
      (cond
        ((_.array? x)
          (cond
            ; (quasiquote ...)
            ((= (~ x 0) 'quasiquote)
              (raise "Nested quasiquote is not supported yet"))
            ; ,foo
            ((= (~ x 0) 'unquote)
              `(array ,(~ x 1)))
            ; ,@foo
            ((= (~ x 0) 'unquote-splicing)
              (~ x 1))
            ; (foo bar)
            (else
              `(array ,(expand-qq x)))))
        ; foo
        ((symbol? x)
         `(array ',x))
        ; Literal
        (else
         `(array ,x))))))))

; Macro
(define (_quote a)
  (if (symbol? a)
    (array 'Sym a.name)
    (if (_.array? a)
      (cons 'array (a.map _quote))
      a)))

(define macros
  ; (quote expr)
  ("quote": (^(v) 
    (raise-if (not (= v.length 2)) "malformed quote")
    (_quote (~ v 1)))

  ; (cond (a b) (c d) (else e))
  "cond": (^(v)
    (raise-if (= v.length 1)
              "at least one clause is required for cond")
    (define clauses (v.slice 1))

    (_.reduceRight clauses (^(ret clause)
      (raise-if (not (_.array? clause))
                    ; FIXME: now we need < operator
                    ; (< clause.length 2))
                "bad clause in cond" (clause: clause))

      (if (and (_.undefined? ret) (= (~ clause 0) 'else))
        ; This cond has 'else clause
        (if (= clause.length 2)
          (~ clause 1)
          `(begin ,@(clause.slice 1)))
        (begin
          (define test (~ clause 0))
          (define body (clause.slice 1))
          (if (= body.length 1)
            `(if ,test ,(~ body 0) ,ret)
            `(if ,test (begin ,@body) ,ret)))))

      #undefined))

  ; (when test body...)
  "when": (^(v)
    `(if ,(~ v 1)
       (begin ,@(v.slice 2))
       #undefined))

  ; (unless test body...)
  "unless": (^(v)
    `(if ,(~ v 1)
       #undefined
       (begin ,@(v.slice 2))))

  ; (quasiquote a (unquote b) (unquote-splicing c))
  ; `(a ,b ,@c)
  "quasiquote": (^(v)
    (raise-if (not (= v.length 2)) "malformed quasiquote")
    (expand-qq (~ v 1)))
  ))
   
; Expand macros in rum-expression `v`
; mod :: modifided flag (just pass undefined for first call)
(define (expand-macros v mod)
  (or mod (set! mod (new Object)))
  (define (expand-inner x)
    (expand-macros x mod))
  (if (_.array? v)
    (begin
      (define car (~ v 0))
      (if (symbol? car)
        (if (~ syntaxes car.name)
          ; Special forms
          (cond
            ((_.contains (array 'define '^ 'set! 'aset!) car)
             (append (v.slice 0 2)
                     (_.map (v.slice 2) expand-inner)))
            ((_.contains (array 'throw 'not 'and 'or '~ 'new 'array
                                '= 'if 'begin 'while) car)
             (v.map expand-inner))
            ((= '.. car)
             (append (array '.. (expand-macros (~ v 1) mod))
                     (_.map (v.slice 2) (^(c)
                       (cond ((symbol? c)
                              (expand-macros c mod))
                             ((_.array? c)
                              (cons (~ c 0)
                                    (_.map (c.slice 1) expand-inner)))
                             (else
                               (raise "malformed ..")))))))
            (else
              v))
          ; Not a special form
          (begin
            (define macro (~ macros car.name))
            (if macro
              (begin ; Found macro usage
                (aset! mod "modified" #t)
                (define ret (macro v))
                (while #t
                  (define _mod (new Object))
                  (set! ret (expand-macros ret _mod))
                  (when (not _mod.modified)
                    (break)))
                ret)
              ; Normal funcall
              (v.map expand-inner))))
        ; Computed funcall
        (v.map expand-inner)))
    (if (obj-expr? v) 
      ; Object expression
      (begin
        (define ret (new Object))
        (_.each v.content
                (^(value key)
                  (aset! ret key (expand-macros value))))
        (new RumExpr.ObjExpr ret))
      ; Literals
      v)))

; Convert rum-expr to JS ast (includes macro expansion)
(define (translate-expr expr)
  (define expanded (expand-macros expr))
  ;(d "Macro expansion: " (before: expr after: expanded))
  (convert-node expanded))

; Compile rum-expressions to JS string
; Returns `undefined` when _putter is given
(define (translate exprs _putter)
  (define ret "")
  (define putter
    (or _putter (^(s) (set! ret (+ ret "\n" s)))))

  (putter (+ "// Generated by RumCoke " RUM_VERSION))
  (exprs.forEach (^(expr)
     (define ast (translate-expr expr))
     ;(when debug (util.puts (+ "ast: " (util.inspect ast #f null #t))))
     (putter (escodegen.generate ast))))

  (if putter
    #undefined
    ret))

(aset! module.exports "translate" translate)
(aset! module.exports "translateExpr" translate-expr)
(aset! module.exports "expandMacros" expand-macros)
