; vim: set ft=scheme:
(define util (require "util"))
(define fs (require "fs"))
(define _ (require "underscore"))
(define escodegen (require "escodegen"))

(define RUM_VERSION (require "./version"))
(define Parser (require "./parser"))
(define parser Parser.parser)

(define RumExpr (require "./rum_expr"))
(define Sym RumExpr.Sym)
(define symbol? RumExpr.isSymbol)
(define obj-expr? RumExpr.isObjExpr)

(define (d arg1 arg2)
  (define header (if arg2 arg1 "debug: "))
  (define value (or arg2 arg1))
  (util.puts header (util.inspect value #f null #t))
  value)
  ; util.inspect obj showHidden depth colors

;(define exprs (parser.parse (fs.readFileSync (~ process.argv 2) "utf8")))

;(util.puts (util.inspect exprs #f null #t))
;(util.puts "--")

(define (raise msg info)
  (or info (set! info (new Object)))
  (aset! info "ERROR" msg)
  (throw (util.inspect info)))
(define (raise-if cond msg info)
  (when cond
    (raise msg info)))

(define (append)
  (_.reduce arguments (^(a b) (.. a (concat b)))))

(define (cons obj ary)
  (append (array obj) ary))

(define (ast typename info)
  (aset! info "type" typename)
  info)

(define (convert-defvar left rest)
  (define init (if (= rest.length 0)
                 null
                 (if (= rest.length 1)
                   (convert-value (~ rest 0))
                   (raise "malformed defvar" (receiver: receiver)))))
  (ast "VariableDeclaration"
       (kind: "var"
        declarations: (array (ast "VariableDeclarator"
                                  (id: (convert-node left)
                                   init: init))))))

(define (wrap-with-function-call inner-ast)
  (ast "CallExpression"
    (arguments: (array)
     callee: (ast "FunctionExpression"
               (params: (array)
                defaults: (array)
                body: (ast "BlockStatement"
                        (body: (array (statement-expr inner-ast))))
                id: null
                rest: null
                generator: #f
                expression: #f)))))

(define (statement-expr inner-ast)
  (if (.. inner-ast type (match #/Literal|Expression$/))
    (ast "ExpressionStatement" (expression: inner-ast))
    inner-ast))

(define (convert-stmt v)
  (statement-expr (convert-node v)))

(define (block-stmt-with-return body-exprs)
  (ast "BlockStatement"
    (body: (body-exprs.map (^(body-item idx)
                             (if (= idx (- body-exprs.length 1))
                               (ast "ReturnStatement"
                                 (argument: (convert-value body-item)))
                               (convert-stmt body-item)))))))

(define (function-with-return params-ary defaults body-exprs)
  (ast "FunctionExpression"
    (params: (_.map params-ary
                    (^(param)
                      (raise-if (not (symbol? param)) "malformed defun param")
                      (convert-node param)))
     defaults: defaults
     body: (block-stmt-with-return body-exprs)
     id: null
     rest: null
     generator: #f
     expression: #f)))

(define (convert-defun left rest)
  (define fname (~ left 0))
  (define params (left.slice 1))
  (raise-if (not (symbol? fname)) "malformed defun")
  
  (ast "VariableDeclaration"
    (kind: "var"
     declarations: (array (ast "VariableDeclarator"
                            (id: (convert-node fname)
                             init: (function-with-return params (array) rest)))))))

(define syntaxes
  ("define": (^(v)
    (define left (~ v 1))
    (define rest (v.slice 2))
    (if (symbol? left)
      (convert-defvar left rest)
      (if (_.array? left)
        (convert-defun left rest)
        (raise "malformed define" (left: left rest: rest)))))
   "^": (^(v)
    (raise-if (not (_.array? (~ v 1))) "malformed function literal params")
    (function-with-return (~ v 1) (array) (v.slice 2)))

   "..": (^(v)
    (define receiver (~ v 1))
    (define call-specs (v.slice 2))
    (call-specs.reduce (^(acc call-spec)
      (if (symbol? call-spec)
        (ast "MemberExpression"
          (computed: #f
           object: acc
           property: (convert-node call-spec)))
        (if (_.array? call-spec)
          (begin
            (raise-if (not (symbol? (~ call-spec 0)))
                      "malformed .."
                      (expected: "Symbol" given: (~ call-spec 0)))
            (ast "CallExpression"
              (callee: (ast "MemberExpression"
                         (computed: #f
                          object: acc
                          property: (convert-node (~ call-spec 0))))
               arguments: (_.map (call-spec.slice 1) convert-value))))
          (raise "malformed ..")))
      )
      (convert-value receiver)))

   "set!": (^(v)
     (ast "AssignmentExpression"
       (operator: "="
        left: (convert-value (~ v 1))
        right: (convert-value (~ v 2)))))

   "aset!": (^(v)
     (ast "AssignmentExpression"
       (operator: "="
        left: (ast "MemberExpression"
                (computed: #t
                 object: (convert-value (~ v 1))
                 property: (convert-value (~ v 2))))
        right: (convert-value (~ v 3)))))

   "~": (^(v)
    (raise-if (not (= v.length 3)) "mailformed ~")
    (ast "MemberExpression"
      (computed: #t
       object: (convert-value (~ v 1))
       property: (convert-value (~ v 2)))))

   "new": (^(v)
     (ast "NewExpression"
       (callee: (convert-value (~ v 1))
        arguments: (_.map (v.slice 2) convert-value))))

   "array": (^(v)
     (ast "ArrayExpression"
       (elements: (_.map (v.slice 1) convert-value))))

   "=": (^(v)
     (raise-if (not (= v.length 3)) "malformed =")
     (ast "BinaryExpression"
       (operator: "==="
        left: (convert-value (~ v 1))
        right: (convert-value (~ v 2)))))

   "if": (^(v value-needed?)
     (if value-needed?
       (ast "ConditionalExpression"
         (test: (convert-value (~ v 1))
          consequent: (convert-value (~ v 2))
          alternate: (convert-value (~ v 3))))
       (if (_.undefined? (~ v 3))
         (ast "IfStatement"
           (test: (convert-value (~ v 1))
            consequent: (convert-stmt (~ v 2))))
         (ast "IfStatement"
           (test: (convert-value (~ v 1))
            consequent: (convert-stmt (~ v 2))
            alternate: (convert-stmt (~ v 3)))))))

   "begin": (^(v value-needed?)
     (if value-needed?
       (ast "CallExpression"
         (arguments: (array)
          callee: (ast "FunctionExpression"
                    (params: (array)
                     defaults: (array)
                     body: (block-stmt-with-return (v.slice 1))
                     id: null
                     rest: null
                     generator: #f
                     expression: #f))))
       (ast "BlockStatement"
         (body: (_.map (v.slice 1) convert-stmt)))))

   "and": (^(v)
     (ast "LogicalExpression"
       (operator: "&&"
        left: (convert-value (~ v 1))
        right: (convert-value (~ v 2)))))

   "or": (^(v)
     (define rest (v.slice 1))
     (if (= rest.length 0)
       (ast "Literal" (value: #f))
       (if (= rest.length 1)
         (ast "LogicalExpression"
           (operator: "||"
            left: (convert-value (~ rest 0))
            right: (ast "Literal" (value: #f))))
         (_.reduce (rest.slice 1)
                   (^(acc item)
                     (ast "LogicalExpression"
                          (operator: "||"
                                     left: acc
                                     right: (convert-value item))))
                   (convert-value (~ rest 0))))))

   "not": (^(v)
     (raise-if (not (= v.length 2)) "malformed not")
     (ast "UnaryExpression"
       (operator: "!"
        argument: (convert-value (~ v 1)))))

   ; TODO: should `while` have value in RumCoke?
   "while": (^(v value-needed?)
     (define while-stmt (ast "WhileStatement"
                          (test: (convert-value (~ v 1))
                           body: (ast "BlockStatement"
                                   (body: (_.map (v.slice 2) convert-stmt))))))
     (if value-needed?
       (wrap-with-function-call while-stmt)
       while-stmt))

   "break": (^(v)
     (ast "BreakStatement" (label: null)))

   "throw": (^(v value-needed?)
     (raise-if (not (= v.length 2)) "malformed throw")
     (define throw-stmt (ast "ThrowStatement"
                          (argument: (convert-value (~ v 1)))))
     (if value-needed?
       (wrap-with-function-call throw-stmt)
       throw-stmt))

   "raw-js-ast": (^(v)
     (raise-if (not (= v.length 2)) "malformed raw-js-ast")
     (define arg (~ v 1))
     (if (obj-expr? arg)
       (~ arg "content")
       arg))
  ))

(_.each (array "+" "-" "*" "/") (^(op)
  (aset! syntaxes op (^(v) 
    (_.reduce (_.map (v.slice 1) convert-value) (^(a b)
      (ast "BinaryExpression"
        (operator: op
         left: a
         right: b))))))))

(define (convert-value v)
  (convert-node v #t))

(define (convert-node v value-needed?)
  (if (or (_.number? v) (_.string? v) (_.reg-exp? v)
          (_.boolean? v) (_.null? v))
    (ast "Literal" (value: v))
    (if (_.undefined? v)
      (ast "UnaryExpression"
        (operator: "void"
         argument: (ast "Literal" (value: 0))))
      (if (_.empty? v)
        ; TODO: Replace this with `(new Object)'
        (ast "ObjectExpression" (properties: (array)))
        (if (symbol? v)
          (ast "Identifier" (name: v.jsName))
          (if (_.array? v)
            ; Application
            (begin
              (define first (~ v 0))
              (define rest (v.slice 1))
              (define conv (and (symbol? first)
                             (~ syntaxes first.name)))
              (if conv
                (conv v value-needed?)
                (ast "CallExpression"
                  (callee: (convert-value (~ v 0))
                   arguments: (rest.map convert-value)))))
            (if (obj-expr? v)
              (ast "ObjectExpression" 
                (properties:
                  (_.map (_.pairs v.content)
                    (^(pair)
                      (ast "Property"
                        (kind: "init"
                         key: (ast "Literal"
                                (value: (~ pair 0)))
                         value: (convert-value (~ pair 1))))))))
              (raise "Misplaced JS object" (js_object: v)))))))))

(define (expand-qq a)
  (if (not (_.array? a))
    a
    ; Expand list
    (cons 'append (a.map (^(x)
      ; (quasiquote ...)
      (if (= (~ x 0) 'quasiquote)
        (raise "Nested quasiquote is not supported yet")
        ; (unquote ...)
        (if (= (~ x 0) 'unquote)
          (array 'array (~ x 1))
          ; (unquote-splicing ...)
          (if (= (~ x 0) 'unquote-splicing)
            (~ x 1)
            ; foo
            (if (symbol? x)
              (array 'array (array 'quote x))
              ; (foo bar)
              (if (_.array? x)
                (array 'array (expand-qq x))
                ; Literal
                x))))))))))

(define (_quote a)
  (if (symbol? a)
    (array 'Sym a.name)
    (if (_.array? a)
      (cons 'array (a.map _quote))
      a)))

; Macro
(define macros
  ("quote": (^(v) 
    (raise-if (not (= v.length 2)) "malformed quote")
    (_quote (~ v 1)))

  "instance?": (^(v)
    (raise-if (not (= v.length 3)) "malformed instance?")
    (array 'raw-js-ast 
      (ast "BinaryExpression"
        (operator: "instanceof"
         left: (translate-expr (~ v 1))
         right: (translate-expr (~ v 2))))))

  ; (case a         switch(a){
  ;   ((b c) d e)     case b: case c: d; return d; break;
  ;   (else e))       default: return e;
  ;"case": (^(v)
  ;  (array 'raw-js-ast
  ;    (ast "SwitchStatement"
  ;      (discriminant: (translate-expr (~ v 1))
  ;       cases: (_.map (v.slice 2) (^(clause)
  ;         (ast "SwitchCase"
  ;           (test: 
  ;            consequent: 

  ; (cond (a b) (c d)) => (if a b (if c d undefined))
  ;
  ; TODO: else
  "cond": (^(v)
    (raise-if (= v.length 1)
              "at least one clause is required for cond")
    (define clauses (v.slice 1))
    (define init #undefined)

    (_.reduceRight clauses (^(ret clause)
      (raise-if (not (_.array? clause))
                    ; FIXME: now we need < operator
                    ; (< clause.length 2))
                "bad clause in cond" (clause: clause))
      (define test (~ clause 0))
      (define body (clause.slice 1))
      (if (= body.length 1)
        `(if ,test ,(~ body 0) ,ret)
        `(if ,test (begin ,@body) ,ret)))

      init))

  "when": (^(v)
    (array 'if
           (~ v 1)
           (cons 'begin (v.slice 2))
           undefined))

   "quasiquote": (^(v)
     (raise-if (not (= v.length 2)) "malformed quasiquote")
     (expand-qq (~ v 1)))
  ))
   
(define (expand-macros v mod)
  (or mod (set! mod (new Object)))
  (define (expand-inner x)
    (expand-macros x mod))
  (if (_.array? v)
    (begin
      (define car (~ v 0))
      (if (symbol? car)
        (if (~ syntaxes car.name)
          ; Special forms
          (if (_.contains (array 'define '^ 'set! 'aset!) car)
            (append (v.slice 0 2)
                    (_.map (v.slice 2) expand-inner))
            (if (_.contains (array 'throw 'not 'and 'or '~ 'new 'array
                                   '= 'if 'begin 'while) car)
              (v.map expand-inner)
              (if (= '.. car)
                (append (array '.. (expand-macros (~ v 1) mod))
                  (_.map (v.slice 2) (^(c)
                    (if (symbol? c)
                      (expand-macros c mod)
                      (if (_.array? c)
                        (cons (~ c 0)
                          (_.map (c.slice 1) expand-inner))
                        (raise "malformed .."))))))
                v)))
          ; Not a special form
          (begin
            (define macro (~ macros car.name))
            (if macro
              (begin ; Found macro usage
                (aset! mod "modified" #t)
                (define ret (macro v))
                (while #t
                  (define _mod (new Object))
                  (set! ret (expand-macros ret _mod))
                  (when (not _mod.modified)
                    (break)))
                ret)
              ; Normal funcall
              (v.map expand-inner))))
        ; Computed funcall
        (v.map expand-inner)))
    (if (obj-expr? v) 
      ; Object expression
      (begin
        (define ret (new Object))
        (_.each v.content
                (^(value key)
                  (aset! ret key (expand-macros value))))
        (new RumExpr.ObjExpr ret))
      ; Literals
      v)))

(define (translate-expr expr)
  (define expanded (expand-macros expr))
  ;(d "Macro expansion: " (before: expr after: expanded))
  (convert-node expanded))

; Convert rum-expr to JS
(define (translate exprs)
  (define ret (+ "// Generated by RumCoke " RUM_VERSION))
  (exprs.forEach (^(expr)
                   (define ast (translate-expr expr))
                   ;(when debug (util.puts (+ "ast: " (util.inspect ast #f null #t))))
                   (set! ret (+ ret "\n" (escodegen.generate ast)))))
  ret)

(aset! module.exports "translate" translate)
(aset! module.exports "translateExpr" translate-expr)
(aset! module.exports "expandMacros" expand-macros)
